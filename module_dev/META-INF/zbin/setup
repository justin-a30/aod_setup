#!/sbin/sh
#Dynamic Installer by @BlassGO - CUSTOM SETUP

#Basic functions
true() { return 0; }
false() { return 1; }
echo2() { >&2 echo "$@"; }
find_bin() { local IFS=":"; for path in $PATH; do [ -e "$path/$1" ] && echo "$path/$1" && break; done; }
ui_print() { while [ "$1" ]; do (! $BOOTMODE && [ -e "$OUTFD" ]) && echo -e "ui_print $1\nui_print" >> $OUTFD || echo "$1"; shift; done; }
defined() { while [ "$1" ]; do eval "[ -z \"\${${1}}\" ]" && return 1; shift; done; return 0; }
abort() { ui_print " " "$@" " "; exit 1; }
import_info() { ( echo >> "$l/info.txt"; cat "$1" >> "$l/info.txt"; rm -f "$1" ) 2>/dev/null; }
testrw() { local test return=0; for test; do if [ -d "$test" ]; then (rm -f "$test/.rw$$"; touch "$test/.rw$$" || echo > "$test/.rw$$") 2>/dev/null; if [ -f "$test/.rw$$" ]; then rm -f "$test/.rw$$"; else echo2 '!'"Read-Only: $test" && return=1; fi; else echo2 "Cant find: $test directory" && return=1; fi; done; return $return; }
ensure_dir() { while [ "$1" ]; do ( rm -rf "$1" ) 2>/dev/null; mkdir -p "$1"; [ ! -d "$1" ] && abort "ERROR: Cant create folder $1"; shift; done; }

#Advanced functions
is_substring() {
    case "$2" in
        *"$1"*) return 0 ;;
        *) return 1 ;;
    esac
}
bbForArch() {
   export ARCH
   (rm -f $bb) 2>/dev/null;
   for ARCH in arch/*; do
       if [ -d "$ARCH" ]; then
          cp -f $ARCH/busybox $bb
          chmod 755 $bb
          if [ -x $bb ] && $bb >/dev/null 2>&1; then
            ARCH=${ARCH##*/}
            break
          fi
       fi
   done
   [ ! -f "$bb" ] && abort "ERROR: Unsupported device architecture!"
}
ensure_bin() {
   local path bin
   [ -z "$bb" ] && bb=$(find_bin busybox)
   while [ "$1" ]; do
      bin=
      if [ ! -e "$(command -v "$1")" ]; then
         bin=$(find_bin $1); [ -n "$bin" ] && bin="\"$bin\""
         if [ -z "$bin" -a -n "$bb" ] && "$bb" --list | "$bb" grep -Eq "^$1$"; then bin="\"$bb\" $1"; fi
         if [ -n "$bin" ]; then eval "$1() { $bin \"\$@\"; }"; return 0
         else $needed && abort "ERROR: Could not define \"$1\" binary" || return 1
         fi
      fi
      shift;
   done
}
setup_bb() {
   #Try to ensure /system/bin/sh
   needed=false; ensure_bin umount ln
   if [ ! -f /system/bin/sh ]; then
      umount -l /system 2>/dev/null
      mkdir -p /system/bin
      ln -sf "$(command -v sh)" /system/bin/sh
   fi
   if [ -e "$bb" ]; then
     if ! echo "read me" | "$bb" grep -q "read me"; then
        abort "ERROR:4: BusyBox cannot load on this device!"
     elif ! "$bb" --install -s "$l"; then
        for i in $("$bb" --list); do
          if ! ln -sf "$bb" "$l/$i" && ! "$bb" ln -sf "$bb" "$l/$i" && ! "$bb" ln -f "$bb" "$l/$i"; then
            # create script wrapper if symlinking and hardlinking failed because of restrictive selinux policy
            if ! echo "#!$bb" > "$l/$i" || ! chmod 755 "$l/$i"; then
              abort "ERROR:2: Failed to setup BusyBox"
            fi
          fi
        done
     fi
   else
      abort "ERROR:1: Cant find BusyBox"
   fi
   [ ! -f "$l/sh" ] && abort "ERROR:3: Failed to setup BusyBox"
}

#Get BOOTMODE
ps | grep zygote | grep -qv grep && export BOOTMODE=true || export BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -qv grep && export BOOTMODE=true

#Start
umask 022
export PATH="/sbin:/system/bin:/sbin/su:/su/bin:/su/xbin:/system/xbin:/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH"
needed=true; ensure_bin mkdir chmod cp
needed=false; ensure_bin rm

#Ensure Temp directory
for TMP in /data/tmp /dev/tmp /cache/tmp /mnt/tmp /tmp; do
    mkdir -p $TMP 2>/dev/null; testrw $TMP && break || TMP=
done
[ -n "$TMP" ] && export TMP || abort "ERROR: Failed to create temporary directory"

#Global vars
export MYPATH="$1" \
TMPDIR="$TMP" \
DNM="META-INF/com/google/android/magisk" \
cert="META-INF/zbin/version.txt" \
addons="$TMP/zbin/addons" \
l="$TMP/zbin/ugu" \
PERSISTDIR=/sbin/.magisk/mirror/persist

#Extra
rc="$TMP/0000001.tmp"
rm -rf "$TMP" 2>/dev/null

#Ensure work DIRs
ensure_dir "$l" "$addons"
[ -d "$MYPATH" ] && cd "$MYPATH"

#Recovery Mode + Test Mode Implementation
#(Maintenance or just testing for Devs)
if [ -f core -a -f static ]; then
   #Ensure BusyBox for ARCH
   bb="$TMP/zbin/busybox"; bbForArch
   
   if ! $BOOTMODE; then
      export apex_mount=on
      echo " >> Recovery Mode 1.2.0 "
   else
      export PATH="/data/data/com.termux/files/usr/bin:/data/data/com.termux/files/usr/bin/applets:$PATH"
      echo " >> Test Mode 1.8.0 "
   fi
   echo " @BlassGO "
   echo " "
   [ -d "$MYPATH" ] && echo " -- Working from: $MYPATH"
   echo " -- Loading environment..."
   echo " "
   
   #Ensure BusyBox Environment
   setup_bb; export PATH="$l:$PATH"
   
   #Loading bin & static
   for bin in "arch/$ARCH/bin" static; do
      if [ -f "$bin" ]; then
         unzip -qo "$bin" -d "$TMP/zbin"
         import_info "$TMP/zbin/info.txt"
      else
         abort "ERROR: Cant get $bin"
      fi
   done
  
   #Loading extra.zip (Optional)
   if [ -f "extra.zip" ]; then
      if is_substring $ARCH "$(unzip -l "extra.zip" "$ARCH/")"; then
         unzip -qoj extra.zip "$ARCH/*" -d "$TMP/zbin"
         import_info "$TMP/zbin/info.txt"
      else
         echo2 "setup: extra.zip does not include additions to your architecture"
      fi
   fi
   
   #Getting configs
   cp -f configs/* -t "$l"
  
   #Finish
   find "$TMP/zbin" -type f ! -name "busybox" -exec mv -f {} "$l" \;
   find "$l" -type f -exec chmod 755 {} +;
   echo '
   shopt -s checkwinsize
   export HISTFILE="'$TMP'/zbin/bash_history"
   . ./core
   rm -f "'$rc'"
   ' > "$rc"
   [ ! -f "$rc" ] && abort "setup: Invalid $rc"
   bash --rcfile "$rc"
else
   abort "setup: CANNOT FIND A VALID ENVIRONMENT "
fi
